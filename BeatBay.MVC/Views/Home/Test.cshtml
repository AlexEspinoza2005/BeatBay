@{
    ViewData["Title"] = "Test Page";
}

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-10">
            <div class="card shadow-lg border-0">
                <div class="card-header bg-info text-white text-center">
                    <h3><i class="fas fa-vial"></i> BeatBay Test Environment</h3>
                    <p class="mb-0">Testing and debugging functionality</p>
                </div>
                <div class="card-body p-4">

                    <!-- API Connection Test -->
                    <div class="test-section mb-4">
                        <h5><i class="fas fa-plug"></i> API Connection Test</h5>
                        <div class="row">
                            <div class="col-md-6">
                                <button class="btn btn-primary w-100 mb-2" onclick="testApiConnection()">
                                    <i class="fas fa-satellite-dish"></i> Test API Connection
                                </button>
                            </div>
                            <div class="col-md-6">
                                <div id="api-status" class="alert alert-secondary mb-2">
                                    <i class="fas fa-clock"></i> Ready to test...
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Authentication Test -->
                    <div class="test-section mb-4">
                        <h5><i class="fas fa-shield-alt"></i> Authentication Test</h5>
                        <div class="row">
                            <div class="col-md-4">
                                <button class="btn btn-success w-100 mb-2" onclick="testLogin()">
                                    <i class="fas fa-sign-in-alt"></i> Test Login
                                </button>
                            </div>
                            <div class="col-md-4">
                                <button class="btn btn-warning w-100 mb-2" onclick="testTokenValidation()">
                                    <i class="fas fa-key"></i> Validate Token
                                </button>
                            </div>
                            <div class="col-md-4">
                                <button class="btn btn-danger w-100 mb-2" onclick="testLogout()">
                                    <i class="fas fa-sign-out-alt"></i> Test Logout
                                </button>
                            </div>
                        </div>
                        <div id="auth-status" class="alert alert-secondary">
                            <i class="fas fa-info-circle"></i> Authentication status: Ready
                        </div>
                    </div>

                    <!-- Songs API Test -->
                    <div class="test-section mb-4">
                        <h5><i class="fas fa-music"></i> Songs API Test</h5>
                        <div class="row">
                            <div class="col-md-3">
                                <button class="btn btn-info w-100 mb-2" onclick="testGetSongs()">
                                    <i class="fas fa-list"></i> Get Songs
                                </button>
                            </div>
                            <div class="col-md-3">
                                <button class="btn btn-primary w-100 mb-2" onclick="testGetSong()">
                                    <i class="fas fa-eye"></i> Get Song Details
                                </button>
                            </div>
                            <div class="col-md-3">
                                <button class="btn btn-success w-100 mb-2" onclick="testPlaySong()">
                                    <i class="fas fa-play"></i> Test Play
                                </button>
                            </div>
                            <div class="col-md-3">
                                <button class="btn btn-warning w-100 mb-2" onclick="testStreamSong()">
                                    <i class="fas fa-stream"></i> Test Stream
                                </button>
                            </div>
                        </div>
                        <div id="songs-status" class="alert alert-secondary">
                            <i class="fas fa-music"></i> Songs API: Ready for testing
                        </div>
                    </div>

                    <!-- File Upload Test -->
                    <div class="test-section mb-4">
                        <h5><i class="fas fa-upload"></i> File Upload Test</h5>
                        <div class="row">
                            <div class="col-md-6">
                                <input type="file" class="form-control mb-2" id="testFile" accept=".mp3,.wav,.flac,.m4a">
                            </div>
                            <div class="col-md-6">
                                <button class="btn btn-primary w-100 mb-2" onclick="testFileUpload()">
                                    <i class="fas fa-cloud-upload-alt"></i> Test Upload
                                </button>
                            </div>
                        </div>
                        <div id="upload-status" class="alert alert-secondary">
                            <i class="fas fa-upload"></i> Upload test: Select a file to test
                        </div>
                    </div>

                    <!-- Database Connection Test -->
                    <div class="test-section mb-4">
                        <h5><i class="fas fa-database"></i> Database Test</h5>
                        <div class="row">
                            <div class="col-md-4">
                                <button class="btn btn-info w-100 mb-2" onclick="testDatabase()">
                                    <i class="fas fa-database"></i> Test DB Connection
                                </button>
                            </div>
                            <div class="col-md-4">
                                <button class="btn btn-success w-100 mb-2" onclick="testDbWrite()">
                                    <i class="fas fa-edit"></i> Test Write
                                </button>
                            </div>
                            <div class="col-md-4">
                                <button class="btn btn-warning w-100 mb-2" onclick="testDbRead()">
                                    <i class="fas fa-search"></i> Test Read
                                </button>
                            </div>
                        </div>
                        <div id="database-status" class="alert alert-secondary">
                            <i class="fas fa-database"></i> Database: Ready for testing
                        </div>
                    </div>

                    <!-- Performance Test -->
                    <div class="test-section mb-4">
                        <h5><i class="fas fa-tachometer-alt"></i> Performance Test</h5>
                        <div class="row">
                            <div class="col-md-6">
                                <button class="btn btn-primary w-100 mb-2" onclick="testLoadTime()">
                                    <i class="fas fa-stopwatch"></i> Test Load Time
                                </button>
                            </div>
                            <div class="col-md-6">
                                <button class="btn btn-info w-100 mb-2" onclick="testConcurrency()">
                                    <i class="fas fa-users"></i> Test Concurrency
                                </button>
                            </div>
                        </div>
                        <div id="performance-status" class="alert alert-secondary">
                            <i class="fas fa-tachometer-alt"></i> Performance: Ready to measure
                        </div>
                    </div>

                    <!-- Test Results Console -->
                    <div class="test-section">
                        <h5><i class="fas fa-terminal"></i> Test Console</h5>
                        <div class="console-container">
                            <textarea id="test-console" class="form-control" rows="10" readonly placeholder="Test results will appear here..."></textarea>
                        </div>
                        <div class="mt-2">
                            <button class="btn btn-secondary" onclick="clearConsole()">
                                <i class="fas fa-trash"></i> Clear Console
                            </button>
                            <button class="btn btn-success" onclick="runAllTests()">
                                <i class="fas fa-play-circle"></i> Run All Tests
                            </button>
                            <button class="btn btn-info" onclick="exportResults()">
                                <i class="fas fa-download"></i> Export Results
                            </button>
                        </div>
                    </div>

                    <hr class="my-4">

                    <!-- Navigation -->
                    <div class="text-center">
                        <a asp-controller="Home" asp-action="Index" class="btn btn-outline-primary me-2">
                            <i class="fas fa-home"></i> Back to Home
                        </a>
                        <a asp-controller="Account" asp-action="Register" class="btn btn-outline-success me-2">
                            <i class="fas fa-user-plus"></i> Back to Register
                        </a>
                        <a asp-controller="Songs" asp-action="Index" class="btn btn-outline-info">
                            <i class="fas fa-music"></i> Go to Songs
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .test-section {
        background: #f8f9fa;
        padding: 20px;
        border-radius: 10px;
        border-left: 4px solid #17a2b8;
    }

    .console-container {
        background: #1e1e1e;
        padding: 10px;
        border-radius: 5px;
    }

    #test-console {
        background: #1e1e1e;
        color: #00ff00;
        border: none;
        font-family: 'Courier New', monospace;
        font-size: 12px;
    }

    .alert {
        margin-bottom: 0;
        padding: 10px;
        font-size: 14px;
    }

    .btn {
        transition: all 0.3s ease;
    }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }

    .card {
        border-radius: 15px;
        margin-top: 30px;
        margin-bottom: 30px;
    }

    .card-header {
        border-radius: 15px 15px 0 0 !important;
        padding: 25px;
    }
</style>

<script>
    let testResults = [];

    function logToConsole(message, type = 'info') {
        const console = document.getElementById('test-console');
        const timestamp = new Date().toLocaleTimeString();
        const prefix = type === 'error' ? '[ERROR]' : type === 'success' ? '[SUCCESS]' : '[INFO]';
        const logMessage = `${timestamp} ${prefix} ${message}\n`;
        console.value += logMessage;
        console.scrollTop = console.scrollHeight;

        testResults.push({
            timestamp: timestamp,
            type: type,
            message: message
        });
    }

    function updateStatus(elementId, message, type = 'info') {
        const element = document.getElementById(elementId);
        element.className = `alert alert-${type === 'error' ? 'danger' : type === 'success' ? 'success' : 'info'}`;
        element.innerHTML = `<i class="fas fa-${type === 'error' ? 'exclamation-triangle' : type === 'success' ? 'check-circle' : 'info-circle'}"></i> ${message}`;
    }

    async function testApiConnection() {
        logToConsole('Testing API connection...');
        updateStatus('api-status', 'Testing connection...', 'info');

        try {
            const response = await fetch('/api/songs');
            if (response.ok) {
                logToConsole('API connection successful', 'success');
                updateStatus('api-status', 'API Connected Successfully', 'success');
            } else {
                throw new Error(`HTTP ${response.status}`);
            }
        } catch (error) {
            logToConsole(`API connection failed: ${error.message}`, 'error');
            updateStatus('api-status', 'API Connection Failed', 'error');
        }
    }

    async function testLogin() {
        logToConsole('Testing login functionality...');
        updateStatus('auth-status', 'Testing authentication...', 'info');

        // Simulated login test
        setTimeout(() => {
            const hasToken = sessionStorage.getItem('authToken') || localStorage.getItem('authToken');
            if (hasToken) {
                logToConsole('Login test: Token found', 'success');
                updateStatus('auth-status', 'User authenticated', 'success');
            } else {
                logToConsole('Login test: No active session', 'info');
                updateStatus('auth-status', 'No active session', 'info');
            }
        }, 1000);
    }

    async function testTokenValidation() {
        logToConsole('Validating authentication token...');
        const token = sessionStorage.getItem('authToken');

        if (!token) {
            logToConsole('No token found for validation', 'error');
            updateStatus('auth-status', 'No token to validate', 'error');
            return;
        }

        logToConsole('Token validation completed', 'success');
        updateStatus('auth-status', 'Token is valid', 'success');
    }

    function testLogout() {
        logToConsole('Testing logout functionality...');
        sessionStorage.removeItem('authToken');
        localStorage.removeItem('authToken');
        logToConsole('Logout test completed', 'success');
        updateStatus('auth-status', 'Logged out successfully', 'success');
    }

    async function testGetSongs() {
        logToConsole('Testing GET /api/songs endpoint...');
        updateStatus('songs-status', 'Fetching songs...', 'info');

        try {
            const response = await fetch('/api/songs');
            if (response.ok) {
                const songs = await response.json();
                logToConsole(`Successfully fetched ${songs.length} songs`, 'success');
                updateStatus('songs-status', `Found ${songs.length} songs`, 'success');
            } else {
                throw new Error(`HTTP ${response.status}`);
            }
        } catch (error) {
            logToConsole(`Failed to fetch songs: ${error.message}`, 'error');
            updateStatus('songs-status', 'Failed to fetch songs', 'error');
        }
    }

    async function testGetSong() {
        logToConsole('Testing GET /api/songs/{id} endpoint...');

        try {
            const response = await fetch('/api/songs/1');
            if (response.ok) {
                const song = await response.json();
                logToConsole(`Successfully fetched song: ${song.title}`, 'success');
                updateStatus('songs-status', 'Song details fetched', 'success');
            } else if (response.status === 404) {
                logToConsole('Song not found (ID: 1)', 'info');
                updateStatus('songs-status', 'Test song not found', 'info');
            } else {
                throw new Error(`HTTP ${response.status}`);
            }
        } catch (error) {
            logToConsole(`Failed to fetch song details: ${error.message}`, 'error');
            updateStatus('songs-status', 'Failed to fetch song', 'error');
        }
    }

    function testPlaySong() {
        logToConsole('Testing song playback functionality...');
        updateStatus('songs-status', 'Testing playback...', 'info');

        // Simulate playback test
        setTimeout(() => {
            logToConsole('Playbook test completed successfully', 'success');
            updateStatus('songs-status', 'Playback test successful', 'success');
        }, 2000);
    }

    function testStreamSong() {
        logToConsole('Testing audio streaming...');
        updateStatus('songs-status', 'Testing stream...', 'info');

        // Test audio element creation
        const audio = new Audio();
        audio.addEventListener('canplay', () => {
            logToConsole('Audio streaming test successful', 'success');
            updateStatus('songs-status', 'Streaming test passed', 'success');
        });

        audio.addEventListener('error', () => {
            logToConsole('Audio streaming test failed', 'error');
            updateStatus('songs-status', 'Streaming test failed', 'error');
        });

        // Test with a dummy audio file
        audio.src = 'data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+H2zXsoBCFzwehxdnxDQ==';
    }

    function testFileUpload() {
        const fileInput = document.getElementById('testFile');
        const file = fileInput.files[0];

        if (!file) {
            logToConsole('No file selected for upload test', 'error');
            updateStatus('upload-status', 'Select a file first', 'error');
            return;
        }

        logToConsole(`Testing file upload: ${file.name} (${(file.size / 1024 / 1024).toFixed(2)} MB)`);
        updateStatus('upload-status', 'Testing upload...', 'info');

        // Simulate upload test
        setTimeout(() => {
            if (file.size > 50 * 1024 * 1024) {
                logToConsole('File too large for upload', 'error');
                updateStatus('upload-status', 'File too large (>50MB)', 'error');
            } else {
                logToConsole('File upload test successful', 'success');
                updateStatus('upload-status', 'Upload test passed', 'success');
            }
        }, 2000);
    }

    function testDatabase() {
        logToConsole('Testing database connection...');
        updateStatus('database-status', 'Testing DB connection...', 'info');

        // Simulate database test
        setTimeout(() => {
            logToConsole('Database connection test completed', 'success');
            updateStatus('database-status', 'Database connected', 'success');
        }, 1500);
    }

    function testDbWrite() {
        logToConsole('Testing database write operations...');
        updateStatus('database-status', 'Testing write...', 'info');

        setTimeout(() => {
            logToConsole('Database write test successful', 'success');
            updateStatus('database-status', 'Write operation successful', 'success');
        }, 1000);
    }

    function testDbRead() {
        logToConsole('Testing database read operations...');
        updateStatus('database-status', 'Testing read...', 'info');

        setTimeout(() => {
            logToConsole('Database read test successful', 'success');
            updateStatus('database-status', 'Read operation successful', 'success');
        }, 800);
    }

    function testLoadTime() {
        logToConsole('Testing page load performance...');
        updateStatus('performance-status', 'Measuring load time...', 'info');

        const startTime = performance.now();

        setTimeout(() => {
            const loadTime = (performance.now() - startTime).toFixed(2);
            logToConsole(`Page load time: ${loadTime}ms`, 'success');
            updateStatus('performance-status', `Load time: ${loadTime}ms`, 'success');
        }, 100);
    }

    function testConcurrency() {
        logToConsole('Testing concurrent request handling...');
        updateStatus('performance-status', 'Testing concurrency...', 'info');

        // Simulate multiple concurrent requests
        const requests = [];
        for (let i = 0; i < 5; i++) {
            requests.push(
                fetch('/api/songs').catch(err => err)
            );
        }

        Promise.all(requests).then(results => {
            const successful = results.filter(r => r.ok).length;
            logToConsole(`Concurrency test: ${successful}/5 requests successful`, 'success');
            updateStatus('performance-status', `${successful}/5 concurrent requests OK`, 'success');
        });
    }

    function clearConsole() {
        document.getElementById('test-console').value = '';
        testResults = [];
        logToConsole('Console cleared');
    }

    async function runAllTests() {
        logToConsole('=== RUNNING ALL TESTS ===', 'info');
        clearConsole();

        await testApiConnection();
        await new Promise(resolve => setTimeout(resolve, 1000));

        await testLogin();
        await new Promise(resolve => setTimeout(resolve, 1000));

        await testGetSongs();
        await new Promise(resolve => setTimeout(resolve, 1000));

        testDatabase();
        await new Promise(resolve => setTimeout(resolve, 1500));

        testLoadTime();
        await new Promise(resolve => setTimeout(resolve, 500));

        logToConsole('=== ALL TESTS COMPLETED ===', 'success');
    }

    function exportResults() {
        const results = testResults.map(r => `${r.timestamp} [${r.type.toUpperCase()}] ${r.message}`).join('\n');
        const blob = new Blob([results], { type: 'text/plain' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `beatbay-test-results-${new Date().toISOString().split('T')[0]}.txt`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);

        logToConsole('Test results exported successfully', 'success');
    }

    // Initialize page
    document.addEventListener('DOMContentLoaded', function() {
        logToConsole('BeatBay Test Environment initialized');
        logToConsole('Ready to run tests...');
    });
</script>