@model List<BeatBay.DTOs.SongDto>

@{
    ViewData["Title"] = "Canciones";
}

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>@ViewData["Title"]</h2>
        @if (User.IsInRole("Artist") || User.IsInRole("Admin"))
        {
            <a asp-action="Create" class="btn btn-primary">
                <i class="fas fa-plus"></i> Agregar Canción
            </a>
        }
    </div>

    @if (ViewBag.Error != null)
    {
        <div class="alert alert-danger">@ViewBag.Error</div>
    }

    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success">@TempData["Success"]</div>
    }

    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger">@TempData["Error"]</div>
    }

    <!-- Reproductor Global -->
    <div class="card mb-4" id="player-container" style="display: none;">
        <div class="card-body">
            <div class="row align-items-center">
                <div class="col-md-6">
                    <h6 class="mb-0" id="current-song-title">Sin canción</h6>
                    <small class="text-muted" id="current-artist-name">-</small>
                </div>
                <div class="col-md-4">
                    <div class="progress mb-2">
                        <div class="progress-bar" id="progress-bar" style="width: 0%"></div>
                    </div>
                    <div class="d-flex justify-content-between">
                        <small id="current-time">0:00</small>
                        <small id="total-time">0:00</small>
                    </div>
                </div>
                <div class="col-md-2 text-center">
                    <button class="btn btn-outline-primary me-2" id="play-pause-btn" onclick="togglePlayPause()">
                        <i class="fas fa-play"></i>
                    </button>
                    <button class="btn btn-outline-secondary" onclick="stopPlayer()">
                        <i class="fas fa-stop"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Lista de Canciones -->
    <div class="row">
        @if (Model != null && Model.Any())
        {
            @foreach (var song in Model)
            {
                <div class="col-md-6 col-lg-4 mb-3">
                    <div class="card h-100">
                        <div class="card-body">
                            <h5 class="card-title">@song.Title</h5>
                            <p class="card-text">
                                <strong>Artista:</strong> @song.ArtistName<br>
                                <strong>Género:</strong> @song.Genre<br>

                                <strong>Duración:</strong> @song.Duration.ToString(@"mm\:ss")<br>

                                <strong>Reproducciones:</strong> @song.PlayCount
                            </p>
                            <div class="d-flex justify-content-between">
                                <button class="btn btn-success btn-sm" onclick="playSong(@song.Id, '@song.Title', '@song.ArtistName', '@song.StreamingUrl', @song.Duration)">
                                    <i class="fas fa-play"></i> Reproducir
                                </button>
                                <div class="btn-group">
                                    <a asp-action="Details" asp-route-id="@song.Id" class="btn btn-info btn-sm">
                                        <i class="fas fa-eye"></i> Ver
                                    </a>
                                    @if (User.IsInRole("Artist") || User.IsInRole("Admin"))
                                    {
                                        <a asp-action="Edit" asp-route-id="@song.Id" class="btn btn-warning btn-sm">
                                            <i class="fas fa-edit"></i> Editar
                                        </a>
                                        <a asp-action="Delete" asp-route-id="@song.Id" class="btn btn-danger btn-sm">
                                            <i class="fas fa-trash"></i> Eliminar
                                        </a>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="col-12">
                <div class="alert alert-info text-center">
                    <h4>No hay canciones disponibles</h4>
                    <p>No se encontraron canciones en la plataforma.</p>
                    @if (User.IsInRole("Artist") || User.IsInRole("Admin"))
                    {
                        <a asp-action="Create" class="btn btn-primary">Agregar la primera canción</a>
                    }
                </div>
            </div>
        }
    </div>
</div>

<!-- Audio element (hidden) -->
<audio id="audio-player" style="display: none;"></audio>

<script>
    let currentAudio = null;
    let currentPlaybackId = null;
    let isPlaying = false;
    let startTime = 0;

    async function playSong(songId, title, artist, streamingUrl, duration) {
        try {
            // Registrar inicio de reproducción en el backend
            const response = await fetch(`/Songs/Play/${songId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                }
            });

            if (response.ok) {
                const data = await response.json();
                if (data.success) {
                    currentPlaybackId = data.data.playbackId;
                    startTime = Date.now();
                }
            }

            // Detener canción actual si existe
            if (currentAudio) {
                currentAudio.pause();
                currentAudio = null;
            }

            // Crear nuevo audio
            currentAudio = new Audio(streamingUrl);

            // Mostrar información de la canción
            document.getElementById('current-song-title').textContent = title;
            document.getElementById('current-artist-name').textContent = artist;
            document.getElementById('total-time').textContent = formatTime(duration);
            document.getElementById('player-container').style.display = 'block';

            // Event listeners
            currentAudio.addEventListener('loadedmetadata', function() {
                updateProgress();
            });

            currentAudio.addEventListener('timeupdate', function() {
                updateProgress();
            });

            currentAudio.addEventListener('ended', function() {
                stopPlayer();
            });

            // Reproducir
            await currentAudio.play();
            isPlaying = true;
            updatePlayButton();

        } catch (error) {
            console.error('Error playing song:', error);
            alert('Error al reproducir la canción');
        }
    }

    function togglePlayPause() {
        if (!currentAudio) return;

        if (isPlaying) {
            currentAudio.pause();
            isPlaying = false;
        } else {
            currentAudio.play();
            isPlaying = true;
        }
        updatePlayButton();
    }

    function stopPlayer() {
        if (currentAudio) {
            currentAudio.pause();
            currentAudio.currentTime = 0;
            currentAudio = null;
        }

        isPlaying = false;
        updatePlayButton();

        // Actualizar estadística de reproducción
        if (currentPlaybackId && startTime) {
            const durationPlayed = Math.floor((Date.now() - startTime) / 1000);
            updatePlaybackStatistic(currentPlaybackId, durationPlayed);
        }

        // Resetear UI
        document.getElementById('progress-bar').style.width = '0%';
        document.getElementById('current-time').textContent = '0:00';
        document.getElementById('player-container').style.display = 'none';

        currentPlaybackId = null;
        startTime = 0;
    }

    function updatePlayButton() {
        const btn = document.getElementById('play-pause-btn');
        const icon = btn.querySelector('i');

        if (isPlaying) {
            icon.className = 'fas fa-pause';
        } else {
            icon.className = 'fas fa-play';
        }
    }

    function updateProgress() {
        if (!currentAudio) return;

        const progress = (currentAudio.currentTime / currentAudio.duration) * 100;
        document.getElementById('progress-bar').style.width = progress + '%';
        document.getElementById('current-time').textContent = formatTime(currentAudio.currentTime);
    }

    function formatTime(seconds) {
        const mins = Math.floor(seconds / 60);
        const secs = Math.floor(seconds % 60);
        return `${mins}:${secs.toString().padStart(2, '0')}`;
    }

    async function updatePlaybackStatistic(playbackId, durationPlayed) {
        try {
            await fetch(`@Url.Content("~/api/songs")/playback/${playbackId}/update`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer ' + sessionStorage.getItem('authToken')
                },
                body: JSON.stringify(durationPlayed)
            });
        } catch (error) {
            console.error('Error updating playback statistic:', error);
        }
    }

    // Cleanup al cerrar la página
    window.addEventListener('beforeunload', function() {
        if (currentAudio && !currentAudio.paused) {
            stopPlayer();
        }
    });
</script>